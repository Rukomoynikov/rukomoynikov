import{b as i,a as o,t as h}from"../chunks/disclose-version.CUJr2fC1.js";import{p as H,a as N,f as v,s as r,n as s,c as D,r as M}from"../chunks/runtime.KMv9Mpc9.js";import{i as Q}from"../chunks/lifecycle.uhu3C_P9.js";import{s as X,a as K}from"../chunks/store.Dyh_841_.js";import{T as m}from"../chunks/Title.Rt6Roc2-.js";import{C as Y,T as f}from"../chunks/TwoColsContainer.DhZyNmFy.js";import{P as u}from"../chunks/Paragraph.CJbIHcfA.js";import{L as W}from"../chunks/LinksList.Bw3jPvWm.js";import{C as J}from"../chunks/CodeBlockInline.PsoZyWO0.js";import{I as y}from"../chunks/Image.CnxLGc82.js";import{C as P}from"../chunks/CodeBlock.BNapjR4D.js";import{p as Z}from"../chunks/stores.mVP0r6Zq.js";const ee=""+new URL("../assets/example_app.C055XKQi.png?enhanced=true",import.meta.url).href,te=Object.freeze(Object.defineProperty({__proto__:null,default:ee},Symbol.toStringTag,{value:"Module"})),oe=""+new URL("../assets/light-sail-empty-container-service.CaqL981E.png?enhanced=true",import.meta.url).href,re=Object.freeze(Object.defineProperty({__proto__:null,default:oe},Symbol.toStringTag,{value:"Module"})),ae=""+new URL("../assets/pricing.Bm5fCeME.png?enhanced=true",import.meta.url).href,se=Object.freeze(Object.defineProperty({__proto__:null,default:ae},Symbol.toStringTag,{value:"Module"})),ie=Object.assign({"./assets/example_app.png":te,"./assets/light-sail-empty-container-service.png":re,"./assets/pricing.png":se}),le=()=>({description:"Setup docker for Rails and use it for running Rails application.",title:"Rails on Docker",pictures:ie}),Te=Object.freeze(Object.defineProperty({__proto__:null,load:le},Symbol.toStringTag,{value:"Module"}));var ne=h("<!> <!>",1),pe=h('<div slot="aside"><!></div>'),de=h(`Well done! Now it's time to make a commit and if you want to look at your new shiny project
			run local server <!>.`,1),ce=h("<!> <!> <!>",1),ue=h('<div slot="aside"><!></div>'),$e=h("<!> <!> <!> <!> <!>",1),he=h("<!> <!>",1),ve=h("<!> <!>",1),_e=h("<!> <!>",1),me=h("<!> <!> <!> <!> <!> <!> <!> <!> <!> <!> <!> <!> <!> <!>",1);function je(B,U){H(U,!1);const q=X(),b=()=>K(Z,"$page",q);Q(),Y(B,{children:(G,fe)=>{var w=me(),x=v(w);m(x,{level:"1",children:(t,l)=>{s();var e=i("How to deploy Elixir LiveView app to Amazon Lightsail");o(t,e)},$$slots:{default:!0}});var L=r(x,2);f(L,{children:(t,l)=>{u(t,{children:(e,a)=>{s();var n=i("During this article, I will lead you from the basics of Lightsail to fully furnished automatic CI\\CD to Lightsail.");o(e,n)},$$slots:{default:!0}})},$$slots:{default:!0}});var C=r(L,2);m(C,{level:"2",children:(t,l)=>{s();var e=i("What is Lightail in general?");o(t,e)},$$slots:{default:!0}});var k=r(C,2);f(k,{children:(t,l)=>{var e=ne(),a=v(e);u(a,{children:(p,c)=>{s();var d=i("Lightsail - new service from Amazon Cloud. Treat it like a younger brother of Amazon EC2. Though being a light version of EC2, it supports all essential tools. At the moment, you can use VPS, container services, hosted databases, load balancers and permanent storage and backups. Not bad, hah?");o(p,d)},$$slots:{default:!0}});var n=r(a,2);u(n,{children:(p,c)=>{s();var d=i("In this tutorial, I will use container service, which is something similar to Amazon Fargate + EC2 but much easier in configuration. So, basically, what this service does is running Docker containers. And this is what we need to run our Elixir application.");o(p,d)},$$slots:{default:!0}}),o(t,e)},$$slots:{default:!0,aside:(t,l)=>{var e=pe(),a=D(e);W(a,{links:[["Amazon Lightsail","https://lightsail.aws.amazon.com"],["Deploy your first containerized application (Youtube)","https://www.youtube.com/watch?v=RhcR5LaRXIQ"]]}),M(e),o(t,e)}}});var S=r(k,2);m(S,{level:"2",children:(t,l)=>{s();var e=i("Phoenix LiveView application");o(t,e)},$$slots:{default:!0}});var A=r(S,2);f(A,{children:(t,l)=>{var e=ce(),a=v(e);y(a,{get src(){return b().data.pictures["./assets/example_app.png"]},alt:"Phoenix default page"});var n=r(a,2);u(n,{children:(c,d)=>{s();var $=i(`To make this tale a bit simple i will not dive into creating something meaningfull. Rather we
			will create a basic boilerplate with Ecto and Postgres.`);o(c,$)},$$slots:{default:!0}});var p=r(n,2);u(p,{children:(c,d)=>{s();var $=de(),g=r(v($));J(g,{children:(_,ge)=>{s();var F=i("mix phx.server");o(_,F)},$$slots:{default:!0}}),s(),o(c,$)},$$slots:{default:!0}}),o(t,e)},$$slots:{default:!0,aside:(t,l)=>{var e=ue(),a=D(e);W(a,{links:[["Example application on Github","https://lightsail.aws.amazon.com"]]}),M(e),o(t,e)}}});var z=r(A,2);m(z,{level:"2",children:(t,l)=>{s();var e=i("Lightsail required setup");o(t,e)},$$slots:{default:!0}});var I=r(z,2);f(I,{children:(t,l)=>{var e=$e(),a=v(e);y(a,{get src(){return b().data.pictures["./assets/light-sail-empty-container-service.png"]},alt:"Amazon LightSail welcome page"});var n=r(a,2);u(n,{children:($,g)=>{s();var _=i(`We are one step closer to the deployed application. Deployed on Lightsail. To make it possible
			first we need to create a container service and IAM settings.`);o($,_)},$$slots:{default:!0}});var p=r(n,2);u(p,{children:($,g)=>{s();var _=i(`Let's begin from container service. First sign in to AWS console and open Lightsail section.
			At the moment Amazon offers $10 "machine" to 3 months for free. Cheapest ($15) plan for
			managed database also is free for first 3 months. Why not to give it a try? Please create a
			container service.`);o($,_)},$$slots:{default:!0}});var c=r(p,2);y(c,{get src(){return b().data.pictures["./assets/pricing.png"]},alt:"Amazon LightSail pricing"});var d=r(c,2);u(d,{children:($,g)=>{s();var _=i(`On the creation screen: change region if needed, leave "Set up your first deployment" as is.
			In the field "Identify your service" enter desired name and save it somewhere. "Container
			service name" will be used later in CI settings.`);o($,_)},$$slots:{default:!0}}),o(t,e)},$$slots:{default:!0}});var T=r(I,2);m(T,{level:"3",children:(t,l)=>{s();var e=i("IAM roles");o(t,e)},$$slots:{default:!0}});var j=r(T,2);f(j,{children:(t,l)=>{var e=he(),a=v(e);u(a,{children:(p,c)=>{s();var d=i(`To be able interact with AWS API we need to create these two entities: policy, user. By
			default Amazon doesn't offer a policy to control Lightsail, but we are free to create it on
			our own.`);o(p,d)},$$slots:{default:!0}});var n=r(a,2);P(n,{snippet:"posts/deploy-elixir-app-on-lightsail/iam.json"}),o(t,e)},$$slots:{default:!0}});var E=r(j,2);m(E,{level:"2",children:(t,l)=>{s();var e=i("Docker setup");o(t,e)},$$slots:{default:!0}});var O=r(E,2);f(O,{children:(t,l)=>{var e=ve(),a=v(e);u(a,{children:(p,c)=>{s();var d=i(`Lightsail will run container we point to. So, in order to create docker container first
			Dockerfile is required. Using this file Github CI will build image and push the image to
			Lightsail image's container.`);o(p,d)},$$slots:{default:!0}});var n=r(a,2);P(n,{snippet:"posts/deploy-elixir-app-on-lightsail/Dockerfile.dockerfile"}),o(t,e)},$$slots:{default:!0}});var R=r(O,2);m(R,{level:"2",children:(t,l)=>{s();var e=i("Github Actions to test and deploy");o(t,e)},$$slots:{default:!0}});var V=r(R,2);f(V,{children:(t,l)=>{var e=_e(),a=v(e);u(a,{children:(p,c)=>{s();var d=i("Heya! We are almost there. Let's setup CI pipeline to test our super-duper app.");o(p,d)},$$slots:{default:!0}});var n=r(a,2);P(n,{snippet:"posts/deploy-elixir-app-on-lightsail/github-ci.yml"}),o(t,e)},$$slots:{default:!0}}),o(G,w)},$$slots:{default:!0}}),N()}export{je as component,Te as universal};
