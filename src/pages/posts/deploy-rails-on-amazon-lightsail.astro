---
import Layout from "@layouts/Layout.astro";
import Container from "@components/Container.astro";
import GithubRepo from "@components/GithubRepo.astro";
import InlineCode from "@components/InlineCode.astro";
import CodeSnippet from "@components/CodeSnippet.astro";
import TwoColsContainer from "@components/TwoColsContainer.astro";
import Video from "@components/Video.astro";
import Paragraph from "@components/Paragraph.astro";
import LinksList from "@components/LinksList.astro";
import Title from "@components/Title.astro";
import HeroTitleSmall from "@components/HeroTitleSmall.astro";
import { Code } from "astro/components";
import { Picture } from "@astrojs/image/components";

import SocialIcon from "@assets/images/posts/elixir-telegram-bot/facebook-share.jpg";

const seo = {
  title: "Deploy Phoenix LiveView on Amazon LightSail",
  description:
    "This is the first part of three in the series. There you will find creating foundation and answering to users.",
  socialImage: SocialIcon,
};
---

<Layout
  title={seo.title}
  description={seo.description}
  socialImage={seo.socialImage}>
  <HeroTitleSmall title={seo.title} tags={["Elixir", "Amazon Lightsail", "Github Actions"]} />

  <Container>
    <TwoColsContainer>
      <Paragraph>
        During this article i will lead you from basics of Lightsail to fully a furnished automatic CI\CD to Lightsail.
      </Paragraph>
    </TwoColsContainer>

    <Title level="2">What is Lightail in general?</Title>

    <TwoColsContainer>
      <Paragraph>
        Lightsail - new service from Amazon Cloud. Treat it like an younger brother of Amazon EC2. Though being a lighten version of EC2 it supports all essential tools. At the moment you can use: VPS, container services, hosted databases, load balancers and permanent storage and backups. Not bad, hah?
      </Paragraph>

      <Paragraph>
        In this tutorial i will use <InlineCode>container service</InlineCode> what is someting similiar to Amazon Fargate + EC2. Container service allows to run Docker images. 
      </Paragraph>

      <Fragment slot="aside">
        <LinksList
          links={[
            [
              "Amazon Lightsail",
              "https://lightsail.aws.amazon.com",
            ],
            [
              "Deploy your first containerized application (Youtube)",
              "https://www.youtube.com/watch?v=RhcR5LaRXIQ"
            ]
          ]}
        />
      </Fragment>

      <!-- <Paragraph>
        One container service fits five docker containers
      </Paragraph> -->
    </TwoColsContainer>

    <Title level="2">Phoenix LiveView application</Title>

    <TwoColsContainer>
      <Picture
        class="post__picture"
        sizes="(max-width: 920px) 920w, 1840w"
        widths={[920, 1840]}
        src={import(
          "@assets/images/posts/deploy-elixir-app-on-lightsail/example_app.png"
        )}
      />

      <Paragraph>
        To make this tale a bit simple i will not dive into creating something meaningfull. Rather we will create a basic boilerplate without Ecto. If in the future you will decide to add database this should not be a problem as LightSail supports managed databases as well.
      </Paragraph>

      <CodeSnippet fileName="Terminal" icon="console">
# Scaffolding application
mix phx.new github_dashboard --no-ecto
      </CodeSnippet>

      <Paragraph>
        Well done! Now it's time to make a commit and if you want to look at your new shiny project run local server <InlineCode>mix phx.server</InlineCode>.
      </Paragraph>

      <Fragment slot="aside">
        <LinksList
          links={[
            [
              "Example application on Github",
              "https://lightsail.aws.amazon.com",
            ],
          ]}
        />
      </Fragment>
    </TwoColsContainer>

    <Title level="2">Lightsail required setup</Title>

    <TwoColsContainer>
      <Picture
        class="post__picture"
        sizes="(max-width: 920px) 920w, 1840w"
        widths={[920, 1840]}
        src={import(
          "@assets/images/posts/deploy-elixir-app-on-lightsail/light-sail-empty-container-service.png"
        )}
      />

      <Paragraph>
        We are one step closer to the deployed application. Deployed on Lightsail. To make it possible first we need to create a container service and IAM settings.
      </Paragraph>

      <Paragraph>
        Let's begin from container service. First sign in to AWS console and open Lightsail section. At the moment Amazon offers 10$ "machine" to 3 months for free. Why not to give it a try? Please create a container service. 
      </Paragraph>

      <Picture
        class="post__picture"
        sizes="(max-width: 920px) 920w, 1840w"
        widths={[920, 1840]}
        src={import(
          "@assets/images/posts/deploy-elixir-app-on-lightsail/pricing.png"
        )}
      />

      <Paragraph>
        On the creation screen: change region if needed, leave "Set up your first deployment" as is. In the field "Identify your service" enter desired name and save it somewhere. "Container service name" will be used later in CI settings.
      </Paragraph>
    </TwoColsContainer>

    <Title level="2">Docker setup</Title>

    <TwoColsContainer>
      <Paragraph>
        Lightsail will run container we point to. So, in order to create docker container first Dockerfile is required. Using this file Github CI will build image and push the image to Lightsail image's container.
      </Paragraph>

      <CodeSnippet lang="docker" fileName="Dockerfile">
# -----------------
# BASE
# -----------------
FROM elixir:alpine AS base
WORKDIR /app
RUN mix do local.hex --force, local.rebar --force
RUN apk add npm inotify-tools

# -----------------
# BUILD
# -----------------
FROM base AS build
RUN apk add curl bash git
ARG MIX_ENV=prod
ENV MIX_ENV=$MIX_ENV
COPY . ./
# install application
RUN mix do deps.get, compile

# -----------------
# RELEASE
# -----------------
FROM build AS release
ARG MIX_ENV=prod
# digests and compresses static files
RUN mix assets.deploy
# generate release executable
RUN mix phx.gen.release
RUN mix release

# -----------------
# PRODUCTION
# -----------------
FROM elixir:alpine
WORKDIR /app
ARG MIX_ENV=prod

# install dependencies
RUN apk add ncurses-libs curl
COPY --from=release /app/_build/prod/rel/github_dashboard ./

# start application
CMD ["bin/server", "start"]
      </CodeSnippet>
    </TwoColsContainer>

    <Title level="2">Github Actions to test and deploy</Title>

    <TwoColsContainer>
      <Paragraph>
        Heya! We are almost there. Let's setup CI pipeline to test our super-duper app. 
      </Paragraph>

      <CodeSnippet lang="yaml" fileName=".github/workflows/ci.yml" code={`
name: Elixir CI

on:
  push:

permissions:
  contents: read

env:
  CONTAINER_SERVICE_NAME: github-dashboard-container-service
  AWS_REGION: us-east-1
  DOCKER_TAG: github-dashboard-image

jobs:
  build:
    name: Build and test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Elixir
      uses: erlef/setup-beam@988e02bfe678367a02564f65ca2e37726dc0268f
      with:
        elixir-version: '1.12.3' # Define the elixir version [required]
        otp-version: '24.1' # Define the OTP version [required]
    - name: Restore dependencies cache
      uses: actions/cache@v3
      with:
        path: deps
        key: \${{ runner.os }}-mix-\${{ hashFiles('**/mix.lock') }}
        restore-keys: \${{ runner.os }}-mix-
    - name: Install dependencies
      run: mix deps.get
    - name: Run tests
      run: mix test
  deploy:
    name: Deploy to Lightsail
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Build docker container
      run: |
        docker build . -t $DOCKER_TAG
    - name: Install LightSail AWS CLI plugin
      run: |
        curl "https://s3.us-west-2.amazonaws.com/lightsailctl/latest/linux-amd64/lightsailctl" -o "/usr/local/bin/lightsailctl"
        sudo chmod +x /usr/local/bin/lightsailctl
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: \${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: \${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: \${{ env.AWS_REGION }} 
    - name: Push new version to LightSail
      run: aws lightsail push-container-image --region $AWS_REGION --service-name $CONTAINER_SERVICE_NAME --label $DOCKER_TAG --image $DOCKER_TAG:latest
    - name: Deploy pushed container
      run:  aws lightsail create-container-service-deployment --service-name $CONTAINER_SERVICE_NAME --containers file://lightsail/containers.json --public-endpoint file://lightsail/public-endpoint.json

`} />
    </TwoColsContainer>

    <Title level="2">Creating LightSail infrastructure</Title>
    
    <TwoColsContainer>
      <Paragraph>
        Cool part that right out of the box you have configured Minitest tests. If you run <InlineCode>rails test</InlineCode> you see 
      </Paragraph>
    </TwoColsContainer>

    <ul>
      <li>What is LightSail in general</li>
      Video ...
      <li>Basic rails application</li>
      Notetaking app with esbuild and cssbuild (and css bulma)
      <li>Creating LightSail infrastructure</li>
      Container service and database
      <li>Run CI using Gihub Actions</li>
      Recipe (with link to clone particular commit)
      <li>Deploy application to LightSail</li>
      No link to demo
    </ul>

    <GithubRepo 
      title={'act_as_api_client '}
      description={'Templates for popular API\'s and reliable way to create your own clients. At the moment it supports Githubâ€™s API, Authorize.net'}
      link={'https://github.com/Rukomoynikov/act_as_api_client'}
    />
  </Container>
</Layout>
